from pyowm import OWM, exceptions, timeutils
from config import bot
import random, config, os
from mytoken import token, API_key  
from datetime import date
from time import sleep

#API_key = os.environ['API_key']
owm = OWM(API_key, language="ua")

def get_loc_weather(latitude, longitude, message):
    try:
        obs = owm.weather_at_coords(latitude, longitude)
        weather = obs.get_weather()

        humidity = weather.get_humidity()
        l = obs.get_location()
        city_name = l.get_name()
        temperature = weather.get_temperature("celsius")["temp"]

        answer = "–Ø –Ω–∞—à–µ–ª —Ç–µ–±—è üôà  \n"
        answer += config.answer_text.format(city_name, weather.get_detailed_status(), temperature, humidity)
        if temperature < 0:
            answer += "–¢–µ–±–µ —Ç–∞–º –Ω–µ —Ö–æ–ª–æ–¥–Ω–æ, –∫–æ—Ç–∏—á–∫–∞?"
        elif temperature < 10:
            answer += "–ß–∞—à–∫–∞ –≥–æ—Ä—è—á–µ–≥–æ —á–∞—è –Ω–µ –ø–æ–º–µ—à–∞–µ—Ç"
        elif temperature < 15:
            answer += "–ß—É—É—É—Ç–æ—á–∫—É –±—ã —Ç–µ–ø–ª–µ–µ)"
        elif temperature < 20:
            answer += "–ú—É—É—Ä"
        elif temperature < 25:
            answer += "–ü–æ–≥–æ–¥–∞ —à–µ–ø—á–µ—Ç, –Ω—É–∂–Ω–æ –≤—ã–≥—É–ª—è—Ç—å –∫–æ—Ç–∏—á–∫–∞)))"
        elif 25 <= temperature <= 30:
            answer += "–ï—â–µ —á—É—Ç—å-—á—É—Ç—å –∏ —Å—Ç–∞–Ω–µ—Ç —Å–æ–≤—Å–µ–º –∂–∞—Ä–∫–æ, —Ä–∞–∑–¥–µ–≤–∞–π—Å—è...))"
        elif temperature > 30:
            answer += random.choice(config.answer_list_hot)
    except exceptions.api_response_error.NotFoundError:
        bot.send_sticker(message.chat.id, config.error_sticker)
        sleep(3)
        answer = random.choice(config.answer_NotFound)
    except exceptions.api_call_error.APICallTimeoutError:
        answer = config.answer_APICallTimeout
    except exceptions.api_call_error.APICallError:
        answer = config.answer_APICallError

    return answer

def get_city_weather(city):
    '''Send weather of current time to answer of message.
    
    If location not found - return NotFound text
    If timeout reached - return Timeout text'''
    try:
        obs = owm.weather_at_place(city)
        weather = obs.get_weather()
        temperature = weather.get_temperature("celsius")["temp"]
        humidity = weather.get_humidity()

        l = obs.get_location()
        city_name = l.get_name()

        fc = owm.three_hours_forecast(city)
        f = fc.get_forecast()

        answer = config.answer_text.format(city_name, weather.get_detailed_status(), temperature, humidity)
        if temperature < 0:
            answer += random.choice(config.answer_list_cold)
        elif temperature < 10:
            answer += "–ù–∞ —É–ª–∏—Ü–µ —Ö–æ–ª–æ–¥–Ω–æ, –ª—É—á—à–µ –≥—Ä–µ—Ç—å—Å—è —Ç–µ–ø–ª—ã–º —á–∞–µ–º"
        elif temperature < 15:
            answer += "–í—Å–µ –µ—â–µ –º–æ–∂–µ—à—å –æ–¥–µ–≤–∞—Ç—å—Å—è —Ç–µ–ø–ª–æ. –ñ–∞—Ä–∫–æ –Ω–µ –±—É–¥–µ—Ç, –∫–æ—Ç–∏–∫, —è –æ–±–µ—â–∞—é"
        elif temperature < 20:
            answer += "–ú–æ–∂–µ—Ç —Å–µ–≥–æ–¥–Ω—è –æ–¥–µ–Ω–µ—à—å—Å—è, –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é, –∞, –∫–æ—Ç–∏—á–µ–∫?"
        elif temperature < 25:
            answer += "–ü–æ–≥–æ–¥–∞ —à–µ–ø—á–µ—Ç, –Ω—É–∂–Ω–æ –≤—ã–≥—É–ª—è—Ç—å –∫–æ—Ç–∏—á–∫–∞)))"
        elif 25 <= temperature <= 30:
            answer += "–ù–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç–µ–ø–ª–æ –∏ –º–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å, —á—Ç–æ–±—ã –∫–æ—Ç–∏–∫–∏ –Ω–µ —Ö–æ–¥–∏–ª–∏ —Ä–∞–∑–¥–µ—Ç—ã–µ"
        elif temperature > 30:
            answer += random.choice(config.answer_list_hot)
    except exceptions.api_response_error.NotFoundError:
        sleep(3)
        answer = random.choice(config.answer_NotFound)
    except exceptions.api_call_error.APICallTimeoutError:
        answer = config.answer_APICallTimeout
    except exceptions.api_call_error.APICallError:
        answer = config.answer_APICallError

    return answer


def get_moc_weather(latitude, longitude):
    try:
        obs = owm.weather_at_coords(latitude, longitude)
        weather = obs.get_weather()

        humidity = weather.get_humidity()
        l = obs.get_location()
        city_name = l.get_name()
        temperature = weather.get_temperature("celsius")["temp"]
        fc = owm.three_hours_forecast(city_name)
        f = fc.get_forecast()
        lst = f.get_weathers()[0:2]
        today = (date.today)

        tr = timeutils.next_three_hours()


        start = lst.when_starts('iso')
        finish = lst.when_ends('iso')    
     
        print(fc.get_weather_at())
        #print(lst.when_starts)
        if fc.will_have_snow():
            print("–°–ù–Ü–ì")
        elif fc.will_have_rain():
            print("–ú–æ–∂–ª–∏–≤–∏–π –¥–æ—â")
        elif fc.will_have_rain() and fc.will_have_clouds():
            print("–•–º–∞—Ä–Ω–æ. –ú–æ–∂–ª–∏–≤–∏–π –¥–æ—â.")
        elif fc.will_have_sun():
            print("–°–æ–Ω—è—á–Ω–æ")
        elif fc.will_have_fog():
            print("–¢—É–º–∞–Ω–Ω–æ")
    except:
        pass

def get_forecasts(city):
    obs = owm.weather_at_place(city)
    fc = owm.three_hours_forecast(city)
    f = fc.get_forecast()
# Get the list of Weather objects...
    #lst = f.get_weathers()[0:2] #for +3 +6 h
    #print(lst)
    temp, humid, sts = [], [], []

    for weather in f:
        temp.append(weather.get_temperature("celsius")["temp"])	
        humid.append(weather._humidity)
        sts.append(weather._detailed_status)
        #
        #weather.current
        print(f.get_reception_time('iso'))
        if len(temp) == 3:
            break
    answer = '''–ß–µ—Ä–µ–∑ —Ç—Ä–∏ –≥–æ–¥–∏–Ω–∏: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {}
–í–æ–ª–æ–≥—ñ—Å—Ç—å: {}%
–ë—É–¥–µ {}'''.format( temp[0], humid[0], sts[0])
    print(answer)
    return answer

if __name__ == "__main__":
    get_moc_weather(50, 20)
    get_forecasts("–ë–æ—Ä–∏—Å–ø—ñ–ª—å")
    
    